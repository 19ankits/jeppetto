#* @vtlvariable name="getters" type="javassist.CtMethod[]" *#
#* @vtlvariable name="base" type="javassist.CtClass" *#
#* @vtlvariable name="_" type="org.iternine.jeppetto.enhance.TemplateHelper" *#
#set( $baseName = $base.getName() )
#set( $Q = '"')
public $_.cls("${baseName}$DirtyableDBObject").ext($base).impl("org.iternine.jeppetto.dao.mongodb.enhance.DirtyableDBObject") {

    #set( $thisName = $_.clsName() )

    //-------------------------------------------------------------
    // Variables - Private
    //-------------------------------------------------------------

    $_.field("private final $baseName __delegate;")
    $_.field("private boolean __persisted;")
    $_.field("private final java.util.Set __dirtyKeys = new java.util.HashSet();")
    $_.field("private final java.util.Map __extraValues = new java.util.HashMap();")
    $_.field("private java.util.Set __keys = new java.util.HashSet(java.util.Arrays.asList(new String[] {
        #foreach ( $getter in $getters )
            #set ( $key = $_.keyFor($getter.getName()) )
            #if ( $key.equals('id') )
                ${Q}_id${Q}#if( $velocityHasNext ),#end
            #else
                ${Q}$_.keyFor($getter.getName())${Q}#if( $velocityHasNext ),#end
            #end

        #end
    }));")
    $_.field("private boolean __isPartial = false;")


    //-------------------------------------------------------------
    // Constructors
    //-------------------------------------------------------------

    $_.ctor("
    public $thisName() {
        __delegate = null;
        __persisted = true;
    }")

    $_.ctor("
    public $thisName($baseName delegate) {
        __delegate = delegate;
        __persisted = false;
    }")


    //-------------------------------------------------------------
    // Methods - Overrides
    //-------------------------------------------------------------

    #foreach ( $getter in $getters )
    #set( $getterName = $getter.getName() )
    #set( $key = $_.keyFor($getterName) )
    #set( $setterName = $_.asSetter($getter) )
    #set( $returnType = $getter.getReturnType().getName() )

    $_.method("
    public $returnType $getterName() {
        return (__delegate == null) ? super.$getterName() : __delegate.$getterName();
    }")

    $_.method("
    public void $setterName($returnType value) {
        __dirtyKeys.add(${Q}$key${Q});

        if (__delegate == null) {
            super.$setterName(value);
        } else {
            __delegate.$setterName(value);
        }
    }")
    #end

    $_.method("
    public String toString() {
        return (__delegate == null) ? super.toString() : __delegate.toString();
    }")


    //-------------------------------------------------------------
    // Implementation - DBObject
    //-------------------------------------------------------------

    $_.method("
    public Object put(String key, Object v) {
        __keys.add(key); // keys can be removed so first thing to do is restore it

        #foreach ( $getter in $getters )
        #set ( $key = $_.keyFor($getter.getName()) )
        #set ( $setterName = $_.asSetter($getter) )
        #set ( $returnType = $_.returnTypeOf($getter) )
        #set ( $returnTypeName = $returnType.getName() )

        #if ( $getter.getName() == 'getId' )
        if (${Q}_id${Q}.equals(key)) {
            #if ( $returnType.getName() == 'java.lang.String')
            this.$setterName((v instanceof org.bson.types.ObjectId) ? ((org.bson.types.ObjectId) v).toString() : (String) v);
            #elseif ( $returnType.isPrimitive() )
            ## Need coercion logic?
            this.$setterName((($_.wrapperNameFor($returnType)) v).${returnTypeName}Value());
            #else
            this.$setterName(($returnTypeName) org.iternine.jeppetto.dao.mongodb.enhance.DBObjectUtil.fromObject(${returnTypeName}.class, v));
            #end
            return v;
        }

        #else
        if (${Q}$key${Q}.equals(key)) {
            #if ( $returnType.isPrimitive() )
                ## Need coercion logic?
                this.$setterName((($_.wrapperNameFor($returnType)) v).${returnTypeName}Value());
            #elseif ( $returnType.isEnum() )
                this.$setterName((v == null) ? null : (${returnTypeName}) java.lang.Enum.valueOf(${returnTypeName}.class, String.valueOf(v)));
            #else
                #set ( $returnTypeParams = $_.returnTypeParamsOf($getter) )
                #if ( $returnTypeParams.size() == 0 )
                Class[] typeParams = new Class[0];
                #else
                Class[] typeParams = new Class[] {
                #foreach ( $returnTypeParam in $returnTypeParams )

                    ${returnTypeParam.getName()}.class#if( $velocityHasNext ),#end
                #end
                };
                #end
                this.$setterName(($returnTypeName) org.iternine.jeppetto.dao.mongodb.enhance.DBObjectUtil.fromObject(${returnTypeName}.class, v, typeParams));
            #end
            return v;
        }

        #end
        #end

        __extraValues.put(key, v);

        return v;
    }")


    $_.method("
    public Object get(String key) {
        #foreach ( $getter in $getters )
        #set ( $getterName = $getter.getName() )
        #set ( $key = $_.keyFor($getterName) )
        #set ( $returnType = $_.returnTypeOf($getter) )

        #if ( $getter.getName() == 'getId' )
        if (${Q}_id${Q}.equals(key)) {
            #if ( $returnType.getName() == 'java.lang.String')
            String s = this.$getterName();
            return org.bson.types.ObjectId.isValid(s) ? new org.bson.types.ObjectId(s) : s;
            #elseif ( $returnType.isPrimitive() )
            return $_.wrapperNameFor($returnType) .valueOf(this.$getterName());
            #else
            return org.iternine.jeppetto.dao.mongodb.enhance.DBObjectUtil.toDBObject(this.$getterName());
            #end
        }

        #else
        if (${Q}$key${Q}.equals(key)) {
            #if ( $returnType.isPrimitive() )
            return $_.wrapperNameFor($returnType) .valueOf(this.$getterName());
            #else
            return org.iternine.jeppetto.dao.mongodb.enhance.DBObjectUtil.toDBObject(this.$getterName());
            #end
        }

        #end
        #end

        return __extraValues.get(key);
    }")


    $_.method("public void markAsPartialObject() { __isPartial = true; }")


    $_.method("public boolean isPartialObject() { return __isPartial; }")


    $_.method("
    public java.util.Set keySet() {
        return new java.util.HashSet(__keys);
    }")


    $_.method("
    public void putAll(org.bson.BSONObject from) {
        for (java.util.Iterator keyIterator = from.keySet().iterator(); keyIterator.hasNext(); ) {
            String key = (String) keyIterator.next();
    
            put(key, from.get(key));
        }
    }")


    $_.method("
    public void putAll(java.util.Map from) {
        for (java.util.Iterator keyIterator = from.keySet().iterator(); keyIterator.hasNext(); ) {
            String key = (String) keyIterator.next();

            put(key, from.get(key));
        }
    }")


    $_.method("
    public java.util.Map toMap() {
        java.util.Map map = new java.util.HashMap();

        for (java.util.Iterator keyIterator = __keys.iterator(); keyIterator.hasNext(); ) {
            String key = (String) keyIterator.next();

            map.put(key, get(key));
        }

        return map;
    }")


    $_.method("
    public boolean containsField(String s) {
        return __keys.contains(s);
    }")


    $_.method("
    public boolean containsKey(String s) {
        return this.containsField(s);
    }")


    $_.method("
    public Object removeField(String s) {
        Object v = get(s);
        __keys.remove(s);
        return v;
    }")


    $_.method("
    public boolean equals(Object other) {
        if (other instanceof com.mongodb.DBObject) {
            return toMap().equals(((com.mongodb.DBObject) other).toMap());
        } else {
            return super.equals(other);
        }
    }")


    //-------------------------------------------------------------
    // Implementation - DirtyableDBObject
    //-------------------------------------------------------------

    $_.method("
    public boolean isDirty() {
        if (__dirtyKeys.size() > 0) {
            return true;
        }

        #foreach( $getter in $getters )
        #set ( $getterName = $getter.getName() )
        #set ( $returnType = $_.returnTypeOf($getter) )

        #if ( !$returnType.isPrimitive() && !$returnType.isEnum() && $returnType.getName() != 'java.lang.String' )
        #set ( $variableName = $_.keyFor($getterName) )

        Object __$variableName = $getterName();

        if ((__$variableName instanceof org.iternine.jeppetto.dao.mongodb.enhance.DirtyableDBObject
             && ((org.iternine.jeppetto.dao.mongodb.enhance.DirtyableDBObject) __$variableName).isDirty())
            || org.iternine.jeppetto.dao.mongodb.enhance.DBObjectUtil.objectIsMutable(__$variableName)) {
            return true;
        }
        #end
        #end

        return false;
    }")

    $_.method("
    public void markPersisted() {
        __dirtyKeys.clear();

        #foreach ( $getter in $getters )
        #set ( $getterName = $getter.getName() )
        #set ( $returnType = $_.returnTypeOf($getter) )

        #if ( !$returnType.isPrimitive() && !$returnType.isEnum() && $returnType.getName() != 'java.lang.String' )
        #set ( $variableName = $_.keyFor($getterName) )

        Object __$variableName = $getterName();

        if (__$variableName instanceof org.iternine.jeppetto.dao.mongodb.enhance.DirtyableDBObject) {
            ((org.iternine.jeppetto.dao.mongodb.enhance.DirtyableDBObject) __$variableName).markPersisted();
        }
        #end
        #end

        __persisted = true;
    }")

    $_.method("
    public boolean isPersisted() {
        return __persisted;
    }")

    $_.method("
    public java.util.Set getDirtyKeys() {
        java.util.Set dirtyKeys = new java.util.HashSet(__dirtyKeys);

        #foreach( $getter in $getters )
        #set ( $getterName = $getter.getName() )
        #set ( $returnType = $_.returnTypeOf($getter) )

        #if ( !$returnType.isPrimitive() && !$returnType.isEnum() && $returnType.getName() != 'java.lang.String' )
        #set ( $variableName = $_.keyFor($getterName) )

        Object __$variableName = $getterName();

        if ((__$variableName instanceof org.iternine.jeppetto.dao.mongodb.enhance.DirtyableDBObject
             && ((org.iternine.jeppetto.dao.mongodb.enhance.DirtyableDBObject) __$variableName).isDirty())
            || org.iternine.jeppetto.dao.mongodb.enhance.DBObjectUtil.objectIsMutable(__$variableName)) {
            dirtyKeys.add(${Q}$variableName${Q});
        }
        #end
        #end

        return dirtyKeys;
    }")

##
##
##    $_.method("
##    public void includeNullValuedKeys(boolean includeNullValuedKeys) {
##        this.__includeNullValuedKeys = includeNullValuedKeys;
##    }")


    //-------------------------------------------------------------
    // Methods - Other
    //-------------------------------------------------------------

    $_.method("
    public static Class __getPreEnhancedClass() {
        return ${baseName}.class;
    }")
}
