#* @vtlvariable name="getters" type="javassist.CtMethod[]" *#
#* @vtlvariable name="base" type="javassist.CtClass" *#
#* @vtlvariable name="_" type="org.jeppetto.enhance.TemplateHelper" *#
#set( $baseName = $base.getName() )
#set( $Q = '"')
public $_.cls("${baseName}DBObject").ext($base).impl("com.mongodb.DBObject") {

    #set( $thisName = $_.clsName() )


    //-------------------------------------------------------------
    // Variables - Private
    //-------------------------------------------------------------

    $_.field("private boolean __isPartial = false;")
    $_.field("private final java.util.Map __extraValues = new java.util.HashMap();")
    $_.field("private final $baseName __delegate;")

    $_.field("private java.util.Set __keys = new java.util.HashSet(java.util.Arrays.asList(new String[] {
        #foreach ( $getter in $getters )
            #set ( $key = $_.keyFor($getter.getName()) )
            #if ( $key.equals('id') )
                ${Q}_id${Q}#if( $velocityHasNext ),#end
            #else
                ${Q}$_.keyFor($getter.getName())${Q}#if( $velocityHasNext ),#end
            #end
            
        #end
    }));")


    //-------------------------------------------------------------
    // Constructors
    //-------------------------------------------------------------

    $_.ctor("public $thisName() {
        __delegate = null;
    }")

    $_.ctor("public $thisName($baseName copyMe) {
        __delegate = copyMe;
    }")


    //-------------------------------------------------------------
    // Methods - Delegates and overrides
    //-------------------------------------------------------------

    #foreach ( $getter in $getters )
        #set( $getterName = $getter.getName() )
        #set( $setterName = $_.asSetter($getter) )
        #set( $returnType = $getter.getReturnType().getName() )

        $_.method("public $returnType $getterName() {
            return (__delegate == null) ? super.$getterName() : __delegate.$getterName();
        }")

        $_.method("public void $setterName($returnType value) {
            if (__delegate != null) {
                __delegate.$setterName(value);
            } else {
                super.$setterName(value);
            }
        }")
    #end

    $_.method("public String toString() {
        return (__delegate == null) ? super.toString() : __delegate.toString();
    }")


    //-------------------------------------------------------------
    // Implementation - DBObject
    //-------------------------------------------------------------

    #foreach ( $getter in $getters )
        #set ( $getterName = $getter.getName() )
        #set ( $key = $_.keyFor($getterName) )
        #set ( $returnType = $_.returnTypeOf($getter) )
        #set ( $returnTypeName = $returnType.getName() )
        #set ( $returnTypeParams = $_.returnTypeParamsOf($getter) )

        $_.method("
        private Object __${key}ToDBObject($returnTypeName o) {
            #if ( $returnTypeParams.size() == 0 )
                Class[] typeParams = new Class[0];
            #else
                Class[] typeParams = new Class[] {
                #foreach ( $returnTypeParam in $returnTypeParams )

                    ${returnTypeParam.getName()}.class#if( $velocityHasNext ),#end
                #end
                };
            #end
            return org.jeppetto.dao.mongodb.enhance.DBObjectUtil.toDBObject(${returnTypeName}.class, o, typeParams);
        }")

        #if ( $returnType.isPrimitive() )
            $_.method("
            private $returnTypeName __${key}FromObject(Object o) {
                if (o instanceof $_.wrapperNameFor($returnType)) {
                    return (($_.wrapperNameFor($returnType)) o).${returnTypeName}Value();
                } else {
                    $_.createConversionMethodBody($returnType)
                }
            }")
        #elseif( $returnType.isEnum() )
            $_.method("
            private $returnTypeName __${key}FromObject(Object o) {
                return (o == null) ? null : (${returnTypeName}) java.lang.Enum.valueOf(${returnTypeName}.class, String.valueOf(o));
            }")
        #else
            $_.method("
            private $returnTypeName __${key}FromObject(Object o) {
                #if ( $returnTypeParams.size() == 0 )
                    Class[] typeParams = new Class[0];
                #else
                    Class[] typeParams = new Class[] {
                    #foreach ( $returnTypeParam in $returnTypeParams )

                        ${returnTypeParam.getName()}.class#if( $velocityHasNext ),#end
                    #end
                    };
                #end
                return ($returnTypeName) org.jeppetto.dao.mongodb.enhance.DBObjectUtil.fromObject(${returnTypeName}.class, o, typeParams);
            }")
        #end
    #end


    $_.method("public Object put(String key, Object v) {

        __keys.add(key); // keys can be removed so first thing to do is restore it

        #foreach ( $getter in $getters )
            #set ( $key = $_.keyFor($getter.getName()) )
            #set ( $setterName = $_.asSetter($getter) )
            #if ( $getter.getName() == 'getId' )

                if (${Q}_id${Q}.equals(key)) {
                    this.$setterName(__${key}FromObject((v == null) ? null : ((org.bson.types.ObjectId) v).toString()));
                    return v;
                }
            #else

                if (${Q}$key${Q}.equals(key)) {
                    this.$setterName(__${key}FromObject(v));
                    return v;
                }
            #end
        #end

        __extraValues.put(key, v);
        return v;
    }")


    $_.method("public Object get(String key) {
        #foreach ( $getter in $getters )
            #set ( $getterName = $getter.getName() )
            #set ( $key = $_.keyFor($getterName) )
            #if ( $getter.getName() == 'getId' )

                if (${Q}_id${Q}.equals(key)) {
                    return this.$getterName() == null ? null : new org.bson.types.ObjectId(this.$getterName());
                }
            #else

                if (${Q}$key${Q}.equals(key)) {
                    return this.__${key}ToDBObject(this.$getterName());
                }
            #end
        #end

        return __extraValues.get(key);
    }")


    $_.method("public void markAsPartialObject() { __isPartial = true; }")


    $_.method("public boolean isPartialObject() { return __isPartial; }")


    $_.method("public java.util.Set keySet() {
        return new java.util.HashSet(__keys);
    }")


    $_.method("public void putAll(org.bson.BSONObject from) {
        for (java.util.Iterator keyIterator = from.keySet().iterator(); keyIterator.hasNext(); ) {
            String key = (String) keyIterator.next();
    
            put(key, from.get(key));
        }
    }")


    $_.method("public void putAll(java.util.Map from) {
        for (java.util.Iterator keyIterator = from.keySet().iterator(); keyIterator.hasNext(); ) {
            String key = (String) keyIterator.next();

            put(key, from.get(key));
        }
    }")


    $_.method("public java.util.Map toMap() {
        java.util.Map map = new java.util.HashMap();

        for (java.util.Iterator keyIterator = __keys.iterator(); keyIterator.hasNext(); ) {
            String key = (String) keyIterator.next();

            map.put(key, get(key));
        }

        return map;
    }")


    $_.method("public boolean containsField(String s) {
        return __keys.contains(s);
    }")


    $_.method("public boolean containsKey(String s) {
        return this.containsField(s);
    }")


    $_.method("public Object removeField(String s) {
        Object v = get(s);
        __keys.remove(s);
        return v;
    }")


    $_.method("public boolean equals(Object other) {
        if (other instanceof com.mongodb.DBObject) {
            return toMap().equals(((com.mongodb.DBObject) other).toMap());
        } else {
            return super.equals(other);
        }
    }")


    //-------------------------------------------------------------
    // Methods - Other
    //-------------------------------------------------------------

    $_.method("public static Class __getPreEnhancedClass() {
        return ${baseName}.class;
    }")
}
