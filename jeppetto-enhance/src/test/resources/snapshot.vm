#* @vtlvariable name="getters" type="javassist.CtMethod[]" *#
#* @vtlvariable name="base" type="javassist.CtClass" *#
#* @vtlvariable name="_" type="org.iternine.jeppetto.enhance.TemplateHelper" *#
#set( $baseName = $base.getName() )
#set( $Q = '"')
public $_.cls("${baseName}Snapshot").ext($base).impl("org.iternine.jeppetto.enhance.Snapshot") {

    #set( $thisName = $_.clsName() )

    // Fields

    #foreach ( $getter in $getters )
    #set( $getterName = $getter.getName() )
    $_.field("private Object __${getterName}_cache;")
    #end

    $_.field("private Object __acl_cache;")
    $_.field("private Object __olv_cache;")
    $_.field("private boolean __snapshotMethodNeverCalled = true;")
    $_.field("private final $baseName __delegate;")

    // Constructors

    $_.ctor("public $thisName() {
        __delegate = null;
    }")

    $_.ctor("public $thisName($baseName copyMe) {
        __delegate = copyMe;
    }")

    // Delegate methods, overrides of superclass methods

    #foreach ( $getter in $getters )
        #set( $getterName = $getter.getName() )
        #set( $setterName = $_.asSetter($getter) )
        #set( $returnType = $getter.getReturnType().getName() )

        $_.method("public $returnType $getterName() {
            return (__delegate == null) ? super.$getterName() : __delegate.$getterName();
        }")
        
        $_.method("public void $setterName($returnType value) {
            if (__delegate != null) {
                __delegate.$setterName(value);
            } else {
                super.$setterName(value);
            }
        }")
    #end

    // Implementation of Snapshot methods

    $_.method("public boolean isDirty() {
        if (__snapshotMethodNeverCalled) {
            return true;
        }

        Object[] cached = new Object[] {
        #foreach( $getter in $getters )
        __${getter.getName()}_cache#if( $velocityHasNext ),#end
        #end
        };
        Object[] current = new Object[] {
        #foreach ( $getter in $getters )
        org.iternine.jeppetto.enhance.ReferenceUtil.asObject(${getter.getName()}())#if( $velocityHasNext ),#end
        #end
        };

        for (int i = 0; i < current.length; i++) {
            Object o = current[i];
            if (o instanceof org.iternine.jeppetto.enhance.Persistent) {
                if (((org.iternine.jeppetto.enhance.Persistent) o).isDirty()) {
                    return true;
                } else if (cached[i] != null) {
                    current[i] = cached[i]; // do this to avoid needless potentially-deep comparisons
                }
            }
        }

        if (!java.util.Arrays.deepEquals(cached, current)) {
            return true;
        }

        return false;
    }")

    $_.method("public org.iternine.jeppetto.enhance.Snapshot snapshot() {
        __snapshotMethodNeverCalled = false;
        #foreach ( $getter in $getters )
        #set( $getterName = $getter.getName() )
        __${getterName}_cache = org.iternine.jeppetto.enhance.ReferenceUtil.asObject(${getterName}());
        if (__${getterName}_cache instanceof org.iternine.jeppetto.enhance.Snapshot) {
            ((org.iternine.jeppetto.enhance.Snapshot) __${getterName}_cache).snapshot();
        }
        #end
        return this;
    }")
}
